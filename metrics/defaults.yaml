# default values to be applied to all batches unless overridden
table_key: "tmp.metrics"
train_max_n: 1000
score_max_n: 100
alert_max_n: 100
alert_threshold: 0.5
ingest_cron_schedule: "*/3 * * * *"
train_cron_schedule: "*/5 * * * *"
score_cron_schedule: "*/4 * * * *"
alert_cron_schedule: "*/5 * * * *"
train_sql: >
  with

  data_ranked as
  (
  select
    *,
    rank() over (partition by metric_type, metric_batch, metric_name order by metric_timestamp desc) as metric_recency_rank
  from
    `{{ table_key }}`
  where
    metric_batch = '{{ metric_batch }}'
    and
    metric_type = 'metric'
  )

  select
    *
    except (metric_recency_rank)
  from
    data_ranked
  where
    metric_recency_rank <= {{ train_max_n }}
  ;
score_sql: >
  with

  data_ranked as
  (
  select
    *,
    rank() over (partition by metric_type, metric_batch, metric_name order by metric_timestamp desc) as metric_recency_rank
  from
    `{{ table_key }}`
  where
    metric_batch = '{{ metric_batch }}'
    and
    metric_type = 'metric'
  )

  select
    *
    except (metric_recency_rank)
  from
    data_ranked
  where
    metric_recency_rank <= {{ score_max_n }}
  ;
alert_sql: >
  with

  data_ranked as
  (
  select
    *,
    rank() over (partition by metric_type, metric_batch, metric_name order by metric_timestamp desc) as metric_score_recency_rank
  from
    `{{ table_key }}`
  where
    metric_batch = '{{ metric_batch }}'
    and
    metric_type = 'score'
  ),
  
  data_smoothed as
  (
  select
    metric_batch,
    metric_name,
    avg(metric_value) as metric_score,
    min(metric_timestamp) as metric_timestamp_min,
    max(metric_timestamp) as metric_timestamp_max,
  from
    data_ranked
  where
    metric_score_recency_rank <= {{ alert_max_n }}
  group by 1,2
  )
  
  select
    *
  from
    data_smoothed
  where
    metric_score >= {{ alert_threshold }}
  ;
