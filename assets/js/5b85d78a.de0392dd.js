"use strict";(self.webpackChunkanomstack=self.webpackChunkanomstack||[]).push([[237],{4107:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"data-sources/python","title":"Python","description":"Anomstack supports Python as a data source for your metrics. This allows you to create custom data ingestion logic using Python\'s rich ecosystem of libraries.","source":"@site/docs/data-sources/python.md","sourceDirName":"data-sources","slug":"/data-sources/python","permalink":"/anomstack/docs/data-sources/python","draft":false,"unlisted":false,"editUrl":"https://github.com/andrewm4894/anomstack/tree/main/docs/docs/data-sources/python.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Data Sources","permalink":"/anomstack/docs/data-sources"},"next":{"title":"BigQuery","permalink":"/anomstack/docs/data-sources/bigquery"}}');var r=s(4848),i=s(8453);const a={sidebar_position:1},o="Python",c={},l=[{value:"Configuration",id:"configuration",level:2},{value:"Default Configuration",id:"default-configuration",level:2},{value:"Customizing Default Templates",id:"customizing-default-templates",level:2},{value:"Example: HackerNews Top Stories",id:"example-hackernews-top-stories",level:2},{value:"How It Works",id:"how-it-works",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Required DataFrame Structure",id:"required-dataframe-structure",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Related Links",id:"related-links",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"python",children:"Python"})}),"\n",(0,r.jsx)(n.p,{children:"Anomstack supports Python as a data source for your metrics. This allows you to create custom data ingestion logic using Python's rich ecosystem of libraries."}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Configure Python in your metric batch's ",(0,r.jsx)(n.code,{children:"config.yaml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'metric_batch: "your_metric_batch_name"\ntable_key: "your_table_key"\ningest_cron_schedule: "45 6 * * *"  # When to run the ingestion\ningest_fn: >\n  {% include "./path/to/your/python/file.py" %}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"default-configuration",children:"Default Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Many configuration parameters can be set in ",(0,r.jsx)(n.code,{children:"metrics/defaults/defaults.yaml"})," to apply across all metric batches. Key defaults include:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'db: "duckdb"  # Default database type\ntable_key: "metrics"  # Default table name\ningest_cron_schedule: "*/3 * * * *"  # Default ingestion schedule\nmodel_path: "local://./models"  # Default model storage location\nalert_methods: "email,slack"  # Default alert methods\n'})}),"\n",(0,r.jsx)(n.p,{children:"You can override any of these defaults in your metric batch's configuration file."}),"\n",(0,r.jsx)(n.h2,{id:"customizing-default-templates",children:"Customizing Default Templates"}),"\n",(0,r.jsx)(n.p,{children:"Anomstack uses several default templates for preprocessing, SQL queries, and other operations. You can customize these by modifying the files in:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Python Templates"})," (",(0,r.jsx)(n.code,{children:"metrics/defaults/python/"}),"):"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"preprocess.py"}),": Customize how metrics are preprocessed before anomaly detection"]}),"\n",(0,r.jsx)(n.li,{children:"Add your own Python functions for custom processing"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"SQL Templates"})," (",(0,r.jsx)(n.code,{children:"metrics/defaults/sql/"}),"):"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"train.sql"}),": SQL for training data preparation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"score.sql"}),": SQL for scoring data preparation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"alerts.sql"}),": SQL for alert generation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"change.sql"}),": SQL for change detection"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"plot.sql"}),": SQL for metric visualization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"llmalert.sql"}),": SQL for LLM-based alerts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dashboard.sql"}),": SQL for dashboard data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"delete.sql"}),": SQL for data cleanup"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"summary.sql"}),": SQL for summary reports"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"To use custom templates, modify the corresponding files in these directories. The changes will apply to all metric batches unless overridden in specific batch configurations."}),"\n",(0,r.jsx)(n.h2,{id:"example-hackernews-top-stories",children:"Example: HackerNews Top Stories"}),"\n",(0,r.jsx)(n.p,{children:"Here's a complete example that fetches metrics from HackerNews top stories:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pandas as pd\nimport requests\n\ndef ingest(top_n=10) -> pd.DataFrame:\n    # Hacker News API endpoint for top stories\n    url = "https://hacker-news.firebaseio.com/v0/topstories.json"\n    \n    # Get top story IDs\n    response = requests.get(url)\n    story_ids = response.json()[:top_n]\n    \n    # Calculate metrics\n    min_score = float("inf")\n    max_score = 0\n    total_score = 0\n    \n    for story_id in story_ids:\n        story_url = f"https://hacker-news.firebaseio.com/v0/item/{story_id}.json"\n        story = requests.get(story_url).json()\n        score = story.get("score", 0)\n        \n        min_score = min(min_score, score)\n        max_score = max(max_score, score)\n        total_score += score\n    \n    avg_score = total_score / len(story_ids)\n    \n    # Create DataFrame with metrics\n    data = [\n        [f"hn_top_{top_n}_min_score", min_score],\n        [f"hn_top_{top_n}_max_score", max_score],\n        [f"hn_top_{top_n}_avg_score", avg_score],\n        [f"hn_top_{top_n}_total_score", total_score],\n    ]\n    df = pd.DataFrame(data, columns=["metric_name", "metric_value"])\n    df["metric_timestamp"] = pd.Timestamp.utcnow()\n    \n    return df\n'})}),"\n",(0,r.jsx)(n.h3,{id:"how-it-works",children:"How It Works"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Configuration"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'metric_batch: "hn_top_stories_scores"\ntable_key: "metrics_hackernews"\ningest_cron_schedule: "45 6 * * *"\ningest_fn: >\n  {% include "./examples/hackernews/hn_top_stories_scores.py" %}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Function Definition"}),": The ",(0,r.jsx)(n.code,{children:"ingest()"})," function takes a ",(0,r.jsx)(n.code,{children:"top_n"})," parameter to specify how many top stories to analyze."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Data Collection"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Fetches top story IDs from HackerNews API"}),"\n",(0,r.jsx)(n.li,{children:"Retrieves details for each story"}),"\n",(0,r.jsx)(n.li,{children:"Calculates min, max, average, and total scores"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"DataFrame Creation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Creates a DataFrame with required columns: ",(0,r.jsx)(n.code,{children:"metric_name"}),", ",(0,r.jsx)(n.code,{children:"metric_value"}),", and ",(0,r.jsx)(n.code,{children:"metric_timestamp"})]}),"\n",(0,r.jsx)(n.li,{children:"Each metric is a separate row in the DataFrame"}),"\n",(0,r.jsx)(n.li,{children:"Timestamps are in UTC"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Return a pandas DataFrame with required columns"}),"\n",(0,r.jsx)(n.li,{children:"Include proper error handling"}),"\n",(0,r.jsx)(n.li,{children:"Use type hints for better code clarity"}),"\n",(0,r.jsx)(n.li,{children:"Document your functions"}),"\n",(0,r.jsx)(n.li,{children:"Handle API rate limits and timeouts"}),"\n",(0,r.jsx)(n.li,{children:"Use environment variables for sensitive data"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"required-dataframe-structure",children:"Required DataFrame Structure"}),"\n",(0,r.jsx)(n.p,{children:"Your Python function must return a pandas DataFrame with these columns:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metric_name"}),": String identifier for the metric"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metric_value"}),": Numeric value of the metric"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metric_timestamp"}),": UTC timestamp of when the metric was collected"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Python environment must have required dependencies installed"}),"\n",(0,r.jsx)(n.li,{children:"Function execution time limits"}),"\n",(0,r.jsx)(n.li,{children:"Memory usage considerations"}),"\n",(0,r.jsx)(n.li,{children:"API rate limits for external services"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-links",children:"Related Links"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/andrewm4894/anomstack/tree/main/metrics/examples/hackernews",children:"Example Implementation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://pandas.pydata.org/docs/",children:"Pandas Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.python-guide.org/",children:"Python Best Practices"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/andrewm4894/anomstack/tree/main/metrics/defaults/defaults.yaml",children:"Default Configuration"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/andrewm4894/anomstack/tree/main/metrics/defaults",children:"Default Templates"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(6540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);