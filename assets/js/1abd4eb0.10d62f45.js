"use strict";(self.webpackChunkanomstack=self.webpackChunkanomstack||[]).push([[756],{7668:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"data-sources/duckdb","title":"DuckDB","description":"Anomstack supports DuckDB as a data source for your metrics. DuckDB is a fast analytical database that can read and write data from various file formats.","source":"@site/docs/data-sources/duckdb.md","sourceDirName":"data-sources","slug":"/data-sources/duckdb","permalink":"/anomstack/docs/data-sources/duckdb","draft":false,"unlisted":false,"editUrl":"https://github.com/andrewm4894/anomstack/tree/main/docs/docs/data-sources/duckdb.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"docsSidebar","previous":{"title":"ClickHouse","permalink":"/anomstack/docs/data-sources/clickhouse"},"next":{"title":"SQLite","permalink":"/anomstack/docs/data-sources/sqlite"}}');var s=t(4848),i=t(8453);const r={sidebar_position:5},c="DuckDB",l={},o=[{value:"Configuration",id:"configuration",level:2},{value:"Default Configuration",id:"default-configuration",level:2},{value:"Features",id:"features",level:2},{value:"Examples",id:"examples",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Related Links",id:"related-links",level:2}];function d(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.header,{children:(0,s.jsx)(a.h1,{id:"duckdb",children:"DuckDB"})}),"\n",(0,s.jsx)(a.p,{children:"Anomstack supports DuckDB as a data source for your metrics. DuckDB is a fast analytical database that can read and write data from various file formats."}),"\n",(0,s.jsx)(a.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(a.p,{children:["Configure DuckDB in your metric batch's ",(0,s.jsx)(a.code,{children:"config.yaml"}),":"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-yaml",children:'db: "duckdb"\ntable_key: "metrics"  # Default table to store metrics\nmetric_batch: "your_metric_batch_name"\ningest_cron_schedule: "*/3 * * * *"  # When to run the ingestion\ningest_sql: >\n  select\n    current_timestamp() as metric_timestamp,\n    \'metric_name\' as metric_name,\n    your_value as metric_value\n  from your_table;\n'})}),"\n",(0,s.jsx)(a.h2,{id:"default-configuration",children:"Default Configuration"}),"\n",(0,s.jsxs)(a.p,{children:["Many configuration parameters can be set in ",(0,s.jsx)(a.code,{children:"metrics/defaults/defaults.yaml"})," to apply across all metric batches. Key defaults include:"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-yaml",children:'db: "duckdb"  # Default database type\ntable_key: "metrics"  # Default table name\ningest_cron_schedule: "*/3 * * * *"  # Default ingestion schedule\nmodel_path: "local://./models"  # Default model storage location\nalert_methods: "email,slack"  # Default alert methods\n'})}),"\n",(0,s.jsx)(a.p,{children:"You can override any of these defaults in your metric batch's configuration file."}),"\n",(0,s.jsx)(a.h2,{id:"features",children:"Features"}),"\n",(0,s.jsx)(a.p,{children:"DuckDB supports:"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsx)(a.li,{children:"Local file-based databases"}),"\n",(0,s.jsx)(a.li,{children:"MotherDuck cloud integration"}),"\n",(0,s.jsx)(a.li,{children:"Reading from various file formats (CSV, Parquet, JSON)"}),"\n",(0,s.jsx)(a.li,{children:"SQL queries with Python integration"}),"\n"]}),"\n",(0,s.jsx)(a.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(a.p,{children:["Check out the ",(0,s.jsx)(a.a,{href:"https://github.com/andrewm4894/anomstack/tree/main/metrics/examples/duckdb",children:"DuckDB example"})," for a complete working example."]}),"\n",(0,s.jsx)(a.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsx)(a.li,{children:"Use appropriate file formats for your data"}),"\n",(0,s.jsx)(a.li,{children:"Consider query optimization"}),"\n",(0,s.jsx)(a.li,{children:"Implement proper file permissions"}),"\n",(0,s.jsx)(a.li,{children:"Use parameterized queries"}),"\n"]}),"\n",(0,s.jsx)(a.h2,{id:"limitations",children:"Limitations"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsx)(a.li,{children:"Local storage considerations"}),"\n",(0,s.jsx)(a.li,{children:"Memory usage for large datasets"}),"\n",(0,s.jsx)(a.li,{children:"Concurrent access limitations"}),"\n"]}),"\n",(0,s.jsx)(a.h2,{id:"related-links",children:"Related Links"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsx)(a.li,{children:(0,s.jsx)(a.a,{href:"https://duckdb.org/docs",children:"DuckDB Documentation"})}),"\n",(0,s.jsx)(a.li,{children:(0,s.jsx)(a.a,{href:"https://github.com/andrewm4894/anomstack/tree/main/metrics/examples/duckdb",children:"Example Queries"})}),"\n",(0,s.jsx)(a.li,{children:(0,s.jsx)(a.a,{href:"https://github.com/andrewm4894/anomstack/tree/main/metrics/defaults/defaults.yaml",children:"Default Configuration"})}),"\n"]})]})}function u(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,a,t)=>{t.d(a,{R:()=>r,x:()=>c});var n=t(6540);const s={},i=n.createContext(s);function r(e){const a=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:a},e.children)}}}]);