"use strict";(self.webpackChunkanomstack=self.webpackChunkanomstack||[]).push([[369],{3397:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>_,frontMatter:()=>c,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"graphql/examples/start_schedule","title":"Start Schedules (GraphQL)","description":"Below is an example GraphQL query to start multiple job schedules (this avoids having to toggle them all on individually in the UI manually).","source":"@site/docs/graphql/examples/start_schedule.md","sourceDirName":"graphql/examples","slug":"/graphql/examples/start_schedule","permalink":"/anomstack/docs/graphql/examples/start_schedule","draft":false,"unlisted":false,"editUrl":"https://github.com/andrewm4894/anomstack/tree/main/docs/docs/graphql/examples/start_schedule.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"GraphQL","permalink":"/anomstack/docs/graphql/"},"next":{"title":"Scripts & Utilities","permalink":"/anomstack/docs/miscellaneous/scripts-utilities"}}');var s=n(4848),o=n(8453);const c={},r="Start Schedules (GraphQL)",l={},u=[];function d(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"start-schedules-graphql",children:"Start Schedules (GraphQL)"})}),"\n",(0,s.jsx)(t.p,{children:"Below is an example GraphQL query to start multiple job schedules (this avoids having to toggle them all on individually in the UI manually)."}),"\n",(0,s.jsxs)(t.p,{children:["You can run this via ",(0,s.jsx)(t.code,{children:"/graphql"})," endpoint in the dagster UI."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-graphql",children:'mutation {\n\n  # BigQuery\n  startBigqueryExampleSimpleAlertsSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "bigquery_example_simple_alerts_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startBigqueryExampleSimpleChangeSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "bigquery_example_simple_change_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startBigqueryExampleSimpleIngestSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "bigquery_example_simple_ingest_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startBigqueryExampleSimplePlotJobSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "bigquery_example_simple_plot_job_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startBigqueryExampleSimpleScoreSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "bigquery_example_simple_score_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startBigqueryExampleSimpleTrainSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "bigquery_example_simple_train_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n\n  # TomTom\n  startTomTomAlertsSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "tomtom_alerts_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startTomTomChangeSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "tomtom_change_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startTomTomIngestSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "tomtom_ingest_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startTomTomPlotJobSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "tomtom_plot_job_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startTomTomScoreSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "tomtom_score_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startTomTomTrainSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "tomtom_train_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n\n  # EirGrid\n  startEirGridAlertsSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "eirgrid_alerts_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startEirGridChangeSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "eirgrid_change_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startEirGridIngestSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "eirgrid_ingest_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startEirGridPlotJobSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "eirgrid_plot_job_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startEirGridScoreSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "eirgrid_score_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startEirGridTrainSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "eirgrid_train_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n\n  # Netdata\n  startNetdataAlertsSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "netdata_alerts_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startNetdataChangeSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "netdata_change_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startNetdataIngestSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "netdata_ingest_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startNetdataPlotJobSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "netdata_plot_job_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startNetdataScoreSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "netdata_score_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startNetdataTrainSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "netdata_train_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n\n  # NetdataHTTPCheck\n  startNetdataHTTPCheckAlertsSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "netdata_httpcheck_alerts_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startNetdataHTTPCheckChangeSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "netdata_httpcheck_change_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startNetdataHTTPCheckIngestSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "netdata_httpcheck_ingest_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startNetdataHTTPCheckPlotJobSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "netdata_httpcheck_plot_job_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startNetdataHTTPCheckScoreSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "netdata_httpcheck_score_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startNetdataHTTPCheckTrainSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "netdata_httpcheck_train_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n\n  # GSOD\n  startGSODAlertsSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "gsod_alerts_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startGSODChangeSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "gsod_change_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startGSODIngestSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "gsod_ingest_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startGSODPlotJobSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "gsod_plot_job_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startGSODScoreSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "gsod_score_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startGSODTrainSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "gsod_train_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n\n  # Gtrends\n  startGtrendsAlertsSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "gtrends_alerts_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startGtrendsChangeSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "gtrends_change_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startGtrendsIngestSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "gtrends_ingest_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startGtrendsPlotJobSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "gtrends_plot_job_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startGtrendsScoreSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "gtrends_score_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startGtrendsTrainSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "gtrends_train_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n\n  # YFinance\n  startYFinanceAlertsSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "yfinance_alerts_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startYFinanceChangeSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "yfinance_change_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startYFinanceIngestSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "yfinance_ingest_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startYFinancePlotJobSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "yfinance_plot_job_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startYFinanceScoreSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "yfinance_score_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startYFinanceTrainSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "yfinance_train_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n\n  # Weather\n  startWeatherAlertsSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "weather_alerts_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startWeatherChangeSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "weather_change_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startWeatherIngestSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "weather_ingest_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startWeatherPlotJobSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "weather_plot_job_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startWeatherScoreSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "weather_score_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startWeatherTrainSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "weather_train_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n\n  # HNTopStoriesScores\n  startHNTopStoriesScoresAlertsSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "hn_top_stories_scores_alerts_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startHNTopStoriesScoresChangeSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "hn_top_stories_scores_change_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startHNTopStoriesScoresIngestSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "hn_top_stories_scores_ingest_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startHNTopStoriesScoresPlotJobSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "hn_top_stories_scores_plot_job_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startHNTopStoriesScoresScoreSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "hn_top_stories_scores_score_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n  startHNTopStoriesScoresTrainSchedule: startSchedule(scheduleSelector: {\n    scheduleName: "hn_top_stories_scores_train_schedule",\n    repositoryName: "__repository__",\n    repositoryLocationName: "anomstack_code"\n  }) {\n    __typename\n    ... on ScheduleStateResult {\n      scheduleState {\n        name\n        status\n      }\n    }\n  }\n\n}\n'})})]})}function _(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>r});var a=n(6540);const s={},o=a.createContext(s);function c(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);