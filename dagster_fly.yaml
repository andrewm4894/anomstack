scheduler:
  module: dagster.core.scheduler
  class: DagsterDaemonScheduler

run_coordinator:
  module: dagster.core.run_coordinator
  class: QueuedRunCoordinator
  config:
    max_concurrent_runs: 8  # Reduced for better stability in single container
    tag_concurrency_limits:
      - key: "dagster/concurrency_key"
        value: "database"
        limit: 1  # Reduced to prevent resource contention
      - key: "dagster/concurrency_key"
        value: "ml_training"
        limit: 1

# Use DefaultRunLauncher instead of DockerRunLauncher for Fly.io
run_launcher:
  module: dagster.core.launcher.default_run_launcher
  class: DefaultRunLauncher

# Use SQLite storage instead of PostgreSQL for simpler deployment
storage:
  sqlite:
    base_dir: "/data/dagster_storage"

run_retries:
  enabled: true
  max_retries: 2  # Increased for better reliability

# Aggressive retention policies optimized for Fly.io disk usage
retention:
  schedule:
    purge_after_days: 1  # Keep for 1 day only
  sensor:
    purge_after_days:
      skipped: 1    # 1 day for skipped (minimum allowed by Dagster)
      failure: 1    # 1 day for failures
      success: 1    # 1 day for successful runs (minimum allowed by Dagster)

# Enhanced run monitoring for Fly.io environment
run_monitoring:
  enabled: true
  start_timeout_seconds: 300   # 5 minutes to start (increased for cold starts)
  cancel_timeout_seconds: 180  # 3 minutes to cancel (increased)
  max_runtime_seconds: 900     # 15 minutes max runtime per run
  poll_interval_seconds: 30    # Check every 30 seconds (more frequent)

# Disable telemetry
telemetry:
  enabled: false

# Optimized for single container environment
schedules:
  use_threads: true
  num_workers: 2  # Reduced for single container

sensors:
  use_threads: true
  num_workers: 1  # Reduced for single container

compute_logs:
  module: dagster.core.storage.local_compute_log_manager
  class: LocalComputeLogManager
  config:
    base_dir: "/tmp/dagster/compute_logs"

# Local artifact storage for Fly.io persistent volume
local_artifact_storage:
  module: dagster.core.storage.root
  class: LocalArtifactStorage
  config:
    base_dir: "/data/artifacts"

# No code servers needed - using direct Python module loading
