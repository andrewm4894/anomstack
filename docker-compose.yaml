version: "3.7"

services:
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  anomstack_postgresql:
    image: postgres:11
    container_name: anomstack_postgresql
    environment:
      POSTGRES_USER: "postgres_user"
      POSTGRES_PASSWORD: "postgres_password"
      POSTGRES_DB: "postgres_db"
    networks:
      - anomstack_network

  # This service runs the gRPC server that loads your user code, in both dagit
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by dagit.
  anomstack_code:
    build:
      context: .
      dockerfile: ./Dockerfile.anomstack_code
    container_name: anomstack_code
    image: anomstack_code_image
    restart: always
    volumes:
      - ${GOOGLE_APPLICATION_CREDENTIALS}:/tmp/conf/gcp_credentials.json
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
      DAGSTER_CURRENT_IMAGE: "anomstack_code_image"
      # read from .env file
      ANOMSTACK_PROJECT_ID: ${ANOMSTACK_PROJECT_ID}
      ANOMSTACK_DATASET: ${ANOMSTACK_DATASET}
      ANOMSTACK_TABLE: ${ANOMSTACK_TABLE}
      ANOMSTACK_MODEL_PATH: ${ANOMSTACK_MODEL_PATH}
      ANOMSTACK_SLACK_WEBHOOK_URL: ${ANOMSTACK_SLACK_WEBHOOK_URL}
      ANOMSTACK_IGNORE_EXAMPLES: ${ANOMSTACK_IGNORE_EXAMPLES}
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/conf/gcp_credentials.json
    networks:
      - anomstack_network

  # This service runs dagit, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from dagit will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  anomstack_dagit:
    build:
      context: .
      dockerfile: ./Dockerfile.dagster
    entrypoint:
      - dagit
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: anomstack_dagit
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
      # read from .env file
      ANOMSTACK_PROJECT_ID: ${ANOMSTACK_PROJECT_ID}
      ANOMSTACK_DATASET: ${ANOMSTACK_DATASET}
      ANOMSTACK_TABLE: ${ANOMSTACK_TABLE}
      ANOMSTACK_MODEL_PATH: ${ANOMSTACK_MODEL_PATH}
      ANOMSTACK_SLACK_WEBHOOK_URL: ${ANOMSTACK_SLACK_WEBHOOK_URL}
      ANOMSTACK_IGNORE_EXAMPLES: ${ANOMSTACK_IGNORE_EXAMPLES}
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/conf/gcp_credentials.json
    volumes: # Make docker client accessible so we can terminate containers from dagit
      - ${GOOGLE_APPLICATION_CREDENTIALS}:/tmp/conf/gcp_credentials.json
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - anomstack_network
    depends_on:
      - anomstack_postgresql
      - anomstack_code

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  anomstack_daemon:
    build:
      context: .
      dockerfile: ./Dockerfile.dagster
    entrypoint:
      - dagster-daemon
      - run
    container_name: anomstack_daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
      # read from .env file
      ANOMSTACK_PROJECT_ID: ${ANOMSTACK_PROJECT_ID}
      ANOMSTACK_DATASET: ${ANOMSTACK_DATASET}
      ANOMSTACK_TABLE: ${ANOMSTACK_TABLE}
      ANOMSTACK_MODEL_PATH: ${ANOMSTACK_MODEL_PATH}
      ANOMSTACK_SLACK_WEBHOOK_URL: ${ANOMSTACK_SLACK_WEBHOOK_URL}
      ANOMSTACK_IGNORE_EXAMPLES: ${ANOMSTACK_IGNORE_EXAMPLES}
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/conf/gcp_credentials.json
    volumes: # Make docker client accessible so we can launch containers using host docker
      - ${GOOGLE_APPLICATION_CREDENTIALS}:/tmp/conf/gcp_credentials.json
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - anomstack_network
    depends_on:
      - anomstack_postgresql
      - anomstack_code
  
  # netdata for monitoring (http://github.com/netdata/netdata)
  anomstack_netdata:
    image: netdata/netdata:edge
    container_name: anomstack_netdata
    user: root
    pid: host
    network_mode: host
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    volumes:
      - netdataconfig:/etc/netdata
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - NETDATA_CLAIM_TOKEN=${NETDATA_CLAIM_TOKEN}
      - NETDATA_CLAIM_URL=https://app.netdata.cloud
      - NETDATA_CLAIM_ROOMS=${NETDATA_CLAIM_ROOMS}
    profiles: ["observability"]
volumes:
  netdataconfig:
  netdatalib:
  netdatacache:

networks:
  anomstack_network:
    driver: bridge
    name: anomstack_network