services:
  # PostgreSQL service removed - now using SQLite for simpler deployment

  # This service runs the gRPC server that loads your user code, in both the webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by the webserver.
  anomstack_code:
    build:
      context: .
      dockerfile: docker/Dockerfile.anomstack_code
    image: anomstack_code_image
    container_name: anomstack_code
    restart: always
    expose:
      - "4000"
    volumes:
      - ./tmp:/opt/dagster/app/tmp
      - anomstack_metrics_duckdb:/data
      - ./dagster_home:/opt/dagster/dagster_home
      - ./dagster_docker.yaml:/opt/dagster/dagster_home/dagster.yaml
      - ./metrics:/opt/dagster/app/metrics  # ðŸ”¥ ENABLES HOT CONFIG UPDATES
    env_file:
      - .env
    environment:
      DAGSTER_CODE_SERVER_HOST: "${DAGSTER_CODE_SERVER_HOST:-anomstack_code}"
      ANOMSTACK_DUCKDB_PATH: "/data/anomstack.db"
      DAGSTER_HOME: "/opt/dagster/dagster_home"
    networks:
      - anomstack_network
    healthcheck:
      test: ["CMD", "dagster", "api", "grpc-health-check", "-p", "4000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  anomstack_webserver:
    build:
      context: .
      dockerfile: docker/Dockerfile.dagster
    image: anomstack_dagster_image
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - /opt/dagster/dagster_home/workspace.yaml
    container_name: anomstack_webserver
    restart: on-failure
    expose:
      - "3000"
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      DAGSTER_HOME: "/opt/dagster/dagster_home"
    volumes:
      - ./tmp:/opt/dagster/app/tmp
      - anomstack_metrics_duckdb:/data
      - ./dagster_home:/opt/dagster/dagster_home
      - ./dagster_docker.yaml:/opt/dagster/dagster_home/dagster.yaml
      - ./metrics:/opt/dagster/app/metrics  # ðŸ”¥ ENABLES HOT CONFIG UPDATES
    networks:
      - anomstack_network
    depends_on:
      - anomstack_code
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/server_info"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  anomstack_daemon:
    build:
      context: .
      dockerfile: docker/Dockerfile.dagster
    image: anomstack_dagster_image
    entrypoint:
      - dagster-daemon
      - run
    container_name: anomstack_daemon
    restart: on-failure
    env_file:
      - .env
    environment:
      DAGSTER_HOME: "/opt/dagster/dagster_home"
    volumes:
      - ./tmp:/opt/dagster/app/tmp
      - anomstack_metrics_duckdb:/data
      - ./dagster_home:/opt/dagster/dagster_home
      - ./dagster_docker.yaml:/opt/dagster/dagster_home/dagster.yaml
      - ./metrics:/opt/dagster/app/metrics  # ðŸ”¥ ENABLES HOT CONFIG UPDATES
    networks:
      - anomstack_network
    depends_on:
      - anomstack_code
    healthcheck:
      test: ["CMD", "dagster-daemon", "liveness-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # This service runs the dashboard
  anomstack_dashboard:
    build:
      context: .
      dockerfile: docker/Dockerfile.anomstack_dashboard
    image: anomstack_dashboard_image
    container_name: anomstack_dashboard
    restart: on-failure
    ports:
      - "5001:8080"
    env_file:
      - .env
    command: uvicorn dashboard.app:app --host 0.0.0.0 --port 8080 --reload
    volumes:
      - anomstack_metrics_duckdb:/data
      - ./metrics:/opt/dagster/app/metrics
    networks:
      - anomstack_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

networks:
  anomstack_network:
    driver: bridge
    name: anomstack_network

volumes:
  anomstack_metrics_duckdb:
    name: anomstack_metrics_duckdb
