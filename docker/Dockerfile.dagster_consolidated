# Consolidated Dockerfile that includes both Dagster libraries and user code
# This eliminates the need for a separate gRPC code server

FROM python:3.12-slim

RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    build-essential \
    curl \
    cmake \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Dagster libraries
RUN pip install \
    dagster \
    dagster-graphql \
    dagster-webserver \
    dagster-postgres \
    dagster-docker

# Set working directory for user code
WORKDIR /opt/dagster/app

# Copy and install user code requirements
COPY requirements.txt /opt/dagster/app/requirements.txt
RUN pip install -r requirements.txt

# Copy user code
COPY anomstack /opt/dagster/app/anomstack
COPY metrics /opt/dagster/app/metrics

# Copy maintenance scripts for operational use
COPY scripts/maintenance /opt/dagster/app/scripts/maintenance

# Set up Dagster home directory
ENV DAGSTER_HOME=/opt/dagster/dagster_home/
RUN mkdir -p $DAGSTER_HOME

# Copy Dagster configuration files
COPY dagster_docker.yaml $DAGSTER_HOME/dagster.yaml
COPY workspace.yaml $DAGSTER_HOME

COPY .example.env .env

# Set Python path to include user code
ENV PYTHONPATH=/opt/dagster/app:$PYTHONPATH

# Health check that works for both webserver and daemon
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD pgrep -f "dagster" > /dev/null || exit 1

# Default command can be overridden by docker-compose
CMD ["dagster-webserver", "-h", "0.0.0.0", "-p", "3000", "-w", "/opt/dagster/dagster_home/workspace.yaml"]